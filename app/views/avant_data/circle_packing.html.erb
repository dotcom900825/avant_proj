<div class="container" ng-controller="PackingController">
  <div class='row'>
    <div class='col-xs-6'>
      <circle-packing nodes='nodes' width='500' height='400' radius='390' id="pack_chart" name='name' children='children'></circle-packing>

      <hr>
      <div>
        <h6>Hierarchy</h6>
        <ul style='list-style: none; padding-left: 0px'>
          <li>
            <select ng-model="hierOne" ng-change="queryData()" ng-options="column for column in columns">
            </select>
          </li>

          <li>
            <select ng-model="hierTwo" ng-change="queryData()" ng-options="column for column in columns">
            </select>
          </li>
        </ul>

      </div>

      <div style="margin-top: 20px;">
        <h6>Current Hierarchy</h6>
        <ul style='list-style: none; padding-left: 0px'>
          <li>{{ hierOne}} : {{ name }}</li>
          <li>{{ hierTwo }} : {{ children }}</li>
        </ul>
        <button class="btn btn-primary" ng-show="name" ng-click="parallelCoordinate()">Visualize in Parallel Coordinate</button>
      </div>
    </div>

    <div class='col-xs-6'>
      <nvd3 options="options" data="data"></nvd3>
      <hr>
      {{ brushedData }}
    </div>
  </div>

  <hr>

  <div class='row'>
    <div class='col-sm-12'>
      <ul style="padding-left: 5px" >
        <li ng-repeat="column in selectedColumns">
          {{ column }} [<a href ng-click="selectedColumns.splice($index, 1)">X</a>]
        </li>
      </ul>

      <select ng-model="columnToBeAdded" ng-change="addToSelectedColumns(columnToBeAdded)" ng-options="column for column in difference(columns, selectedColumns)">
      </select>

    </div>
    <div class='col-sm-12'>
      <table class='table'>
        <thead>
          <tr>
            <th ng-repeat="column in selectedColumns">{{ column }}</th>
          </tr>
        </thead>
        <tbody>
          <tr class='info' ng-repeat="data in brushedData">
            <td ng-repeat="column in selectedColumns">{{ data[column]}}</td>
          </tr>
          <tr ng-repeat="data in avantData">
            <td ng-repeat="column in selectedColumns">{{ data[column]}}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
  
</div>


<%= content_for :add_later do%>
  <script>
    var margin = 20,
        diameter = 600;

    var color = d3.scale.linear()
        .domain([-1, 5])
        .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
        .interpolate(d3.interpolateHcl);

    var pack = d3.layout.pack()
        .padding(2)
        .size([diameter - margin, diameter - margin])
        .value(function(d) { return d.size; })

    var svg = d3.select("body .canvas").append("svg")
        .attr("width", diameter)
        .attr("height", diameter)
        .append("g")  
        .attr("transform", "translate(" + diameter / 2 + "," + diameter / 2 + ")");

    d3.json("/avant_data/circle_packing.json?query1=cluster_id&query2=race", function(error, root) {
      if (error) return console.error(error);

      var focus = root,
          nodes = pack.nodes(root),
          view;

      var circle = svg.selectAll("circle")
          .data(nodes)
        .enter().append("circle")
          .attr("class", function(d) { return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root"; })
          .style("fill", function(d) { return d.children ? color(d.depth) : null; })
          .on("click", function(d) { if (focus !== d) zoom(d), d3.event.stopPropagation(); });

      var text = svg.selectAll("text")
          .data(nodes)
        .enter().append("text")
          .attr("class", "label")
          .style("fill-opacity", function(d) { return d.parent === root ? 1 : 0; })
          .style("display", function(d) { return d.parent === root ? null : "none"; })
          .text(function(d) { return d.name; });

      var node = svg.selectAll("circle,text");

      d3.select("body")
          .on("click", function() { zoom(root); });

      zoomTo([root.x, root.y, root.r * 2 + margin]);

      function zoom(d) {
        var focus0 = focus; focus = d;

        var transition = d3.transition()
            .duration(d3.event.altKey ? 7500 : 750)
            .tween("zoom", function(d) {
              var i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2 + margin]);
              return function(t) { zoomTo(i(t)); };
            });

        transition.selectAll("text")
          .filter(function(d) { return d.parent === focus || this.style.display === "inline"; })
            .style("fill-opacity", function(d) { return d.parent === focus ? 1 : 0; })
            .each("start", function(d) { if (d.parent === focus) this.style.display = "inline"; })
            .each("end", function(d) { if (d.parent !== focus) this.style.display = "none"; });
      }

      function zoomTo(v) {
        var k = diameter / v[2]; view = v;
        node.attr("transform", function(d) { return "translate(" + (d.x - v[0]) * k + "," + (d.y - v[1]) * k + ")"; });
        circle.attr("r", function(d) { return d.r * k; });
      }
    });

    d3.select(self.frameElement).style("height", diameter + "px");

  </script>
<% end %>