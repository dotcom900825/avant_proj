<!-- <form>
  <label><input type="radio" name="mode" value="size"> Size</label>
  <label><input type="radio" name="mode" value="count" checked> Count</label>


</form> -->

<div class='container' ng-controller="PieChartController">
  <div class='row'>

    <div class='col-md-2'>
      <select id="column" class="form-control" ng-model="dataColumn" ng-options="name for name in columns" ng-change="redraw(dataColumn)"></select>
    </div>

    <div class='col-md-10'>
      <nvd3 options="options" data="data"></nvd3>
    </div>
    
  </div>

  <div class='row'>
    <div class='col-sm-2'>
      <ul style="padding-left: 5px" >
        <li ng-repeat="column in selectedColumns">
          {{ column }} [<a href ng-click="selectedColumns.splice($index, 1)">X</a>]
        </li>
      </ul>

      <select ng-model="columnToBeAdded" ng-change="addToSelectedColumns(columnToBeAdded)" ng-options="column for column in difference(columns, selectedColumns)">
      </select>

    </div>
    <div class='col-sm-10'>
      <table class='table'>
        <thead>
          <tr>
            <th ng-repeat="column in selectedColumns">{{ column }}</th>
          </tr>
        </thead>
        <tbody>
          <tr class='info' ng-repeat="data in avantData | columnFilter: filterBy:dataColumn">
            <td ng-repeat="column in selectedColumns">{{ data[column]}}</td>
          </tr>
          <tr ng-repeat="data in avantData">
            <td ng-repeat="column in selectedColumns">{{ data[column]}}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

</div>


<% content_for :added_later do %>
  <script type="text/javascript">
    var width = 600,
      height = 600,
      radius = Math.min(width, height) / 2,
      color = d3.scale.category20c();

    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height * .52 + ")");

    var partition = d3.layout.partition()
        .sort(null)
        .size([2 * Math.PI, radius * radius])
        .value(function(d) { return 1; });

    var arc = d3.svg.arc()
        .startAngle(function(d) { return d.x; })
        .endAngle(function(d) { return d.x + d.dx; })
        .innerRadius(function(d) { return Math.sqrt(d.y); })
        .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });

    d3.json("/avant_data/gender.json", function(error, root) {
      var path = svg.datum(root).selectAll("path")
          .data(partition.nodes)
        .enter().append("path")
          .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
          .attr("d", arc)
          .style("stroke", "#fff")
          .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
          .style("fill-rule", "evenodd")
          .each(stash);

      d3.selectAll("input").on("change", function change() {
        var value = this.value === "count"
            ? function() { return 1; }
            : function(d) { return d.size; };

        path
            .data(partition.value(value).nodes)
          .transition()
            .duration(1500)
            .attrTween("d", arcTween);
      });
    });

    // Stash the old values for transition.
    function stash(d) {
      d.x0 = d.x;
      d.dx0 = d.dx;
    }

    // Interpolate the arcs in data space.
    function arcTween(a) {
      var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
      return function(t) {
        var b = i(t);
        a.x0 = b.x;
        a.dx0 = b.dx;
        return arc(b);
      };
    }

    d3.select(self.frameElement).style("height", height + "px");

  </script>
<% end %>

