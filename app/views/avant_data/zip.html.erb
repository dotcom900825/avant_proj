
<div id="main" class='container'>
 <div id="form">
  <form name=zipcode onsubmit="javascript:return false;">
    <div class='checkbox'>
      <label>
        <input type="checkbox" id="zipLayerBox" checked onclick="zipLayer()">Zip Layer        
      </label>
    </div>
  </form>
 </div>

 <div id="map-sidebar"> 
  <div class="row">
    <div class="col-sm-10">
      <div id="map-canvas" title="Google Map" style="height:611px; border: thin solid black;">
      </div>
    </div>
    <div class="col-sm-2">
      <div id="sidebar" title="sidebar">
       <div id="message">
        County Boundary Maps<br/>      
        <a href="#">San Diego County</a><br/>
       </div>
      </div> 
    </div>
  </div>

 </div>
</div>

<%= content_for :footer_scripts do%>
  <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>

  <script type="text/javascript">
    // Create an overlay on the map from a projected image - Maps v3...
    // Author. John D. Coryat 05/2009
    // USNaviguide LLC - http://www.usnaviguide.com
    // Thanks go to Mile Williams EInsert: http://econym.googlepages.com/einsert.js, Google's GOverlay Example and Bratliff's suggestion...
    // Opacity code from TPhoto: http://gmaps.tommangan.us/addtphoto.html
    // This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
    //
    // Parameters:
    //    map: This Map
    //    imageUrl: URL of the image (Mandatory)
    //    bounds: Bounds object of image destination (Mandatory)
    //    Options:
    //    addZoom: Added Zoom factor as a parameter to the imageUrl (include complete parameter, including separater like '?zoom='
    //    percentOpacity: Default 50, percent opacity to use when the image is loaded 0-100.
    //    id: Default imageUrl, ID of the div
    //
      
    function ProjectedOverlay(map, imageUrl, bounds, opts)
    {
     google.maps.OverlayView.call(this);

     this.map_ = map;
     this.url_ = imageUrl ;
     this.bounds_ = bounds ;
     this.addZ_ = opts.addZoom || '' ;        // Add the zoom to the image as a parameter
     this.id_ = opts.id || this.url_ ;        // Added to allow for multiple images
     this.percentOpacity_ = opts.percentOpacity || 50 ;

     this.setMap(map);
    }

    ProjectedOverlay.prototype = new google.maps.OverlayView();

    ProjectedOverlay.prototype.createElement = function()
    {
     var panes = this.getPanes() ;
     var div = this.div_ ;

     if (!div)
     {
      div = this.div_ = document.createElement("div");
      div.style.position = "absolute" ;
      div.setAttribute('id',this.id_) ;
      this.div_ = div ;
      this.lastZoom_ = -1 ;
      if( this.percentOpacity_ )
      {
       this.setOpacity(this.percentOpacity_) ;
      }
      panes.overlayLayer.appendChild(div);
     }
    }

    // Remove the main DIV from the map pane

    ProjectedOverlay.prototype.remove = function()
    {
     if (this.div_) 
     {
      this.setMap(null);
      this.div_.parentNode.removeChild(this.div_);
      this.div_ = null;
     }
    }

    // Redraw based on the current projection and zoom level...

    ProjectedOverlay.prototype.draw = function(firstTime)
    {
     // Creates the element if it doesn't exist already.

     this.createElement();

     if (!this.div_)
     {
      return ;
     }

     var c1 = this.get('projection').fromLatLngToDivPixel(this.bounds_.getSouthWest());
     var c2 = this.get('projection').fromLatLngToDivPixel(this.bounds_.getNorthEast());

     if (!c1 || !c2) return;

     // Now position our DIV based on the DIV coordinates of our bounds

     this.div_.style.width = Math.abs(c2.x - c1.x) + "px";
     this.div_.style.height = Math.abs(c2.y - c1.y) + "px";
     this.div_.style.left = Math.min(c2.x, c1.x) + "px";
     this.div_.style.top = Math.min(c2.y, c1.y) + "px";

     // Do the rest only if the zoom has changed...
     
     if ( this.lastZoom_ == this.map_.getZoom() )
     {
      return ;
     }

     this.lastZoom_ = this.map_.getZoom() ;

     var url = this.url_ ;

     if ( this.addZ_ )
     {
      url += this.addZ_ + this.map_.getZoom() ;
     }

     this.div_.innerHTML = '<img src="' + url + '"  width=' + this.div_.style.width + ' height=' + this.div_.style.height + ' >' ;
    }

    ProjectedOverlay.prototype.setOpacity=function(opacity)
    {
     if (opacity < 0)
     {
      opacity = 0 ;
     }
     if(opacity > 100)
     {
      opacity = 100 ;
     }
     var c = opacity/100 ;

     if (typeof(this.div_.style.filter) =='string')
     {
      this.div_.style.filter = 'alpha(opacity:' + opacity + ')' ;
     }
     if (typeof(this.div_.style.KHTMLOpacity) == 'string' )
     {
      this.div_.style.KHTMLOpacity = c ;
     }
     if (typeof(this.div_.style.MozOpacity) == 'string')
     {
      this.div_.style.MozOpacity = c ;
     }
     if (typeof(this.div_.style.opacity) == 'string')
     {
      this.div_.style.opacity = c ;
     }
    }
  </script>

  <script>
   var map;
   var overlay;
   var imageMapType;
   var geocoder;
   var ZIP_MAPTYPE_ID = 'ziphybrid';
   var chkar = [ ] ;          // Zips Found
   var zipar = [ ] ;          // Zips Found
   var marar = [ ] ;          // Marker Array
   var icons = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] ;
   var lastclick = "" ;         // Last Clicked Point
   var infowindow ;
   var defWidth = 1045 ;
   var defHeight = 732 ;
   var winWidth = defWidth;
   var winHeight = defHeight ;

   var tskey = "6d6d3ab795" ;

   function initialize() {

    geocoder = new google.maps.Geocoder();

    imageMapType = new google.maps.ImageMapType({
     getTileUrl: function(coord, zoom) {
      if (zoom < 5 || zoom > 18 ) {
       return null;
      }
      var server = coord.x % 6 ;
      var url = "http://ts" + server + ".usnaviguide.com/tileserver.pl?X=" + coord.x + "&Y=" + coord.y + "&Z=" + zoom + "&T=" + tskey + "&S=Z1001" ;
      return url ;
     },
     tileSize: new google.maps.Size(256, 256),
     opacity:.5,
     name:ZIP_MAPTYPE_ID
    });
   
    var mapOptions = {
     minZoom: 5,
     maxZoom: 18,
     zoom: 11,
     center: new google.maps.LatLng(32.75, -117.14),
     mapTypeId: google.maps.MapTypeId.ROADMAP
    };

    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

    map.overlayMapTypes.push(imageMapType);

    google.maps.event.addListener(map, 'click', function(e) {
     zippoly(e.latLng,'');
    });

    infowindow = new google.maps.InfoWindow();


    overlay = new ProjectedOverlay(map,'http://ts1.usnaviguide.com/imageserver.pl?Z=S&K=1&N=CA' + '&T=' + tskey, bounds, {}) ;
   }

   // Hide the Zip Code overlay...

   function zipLayer()
   {
    if ( document.getElementById("zipLayerBox").checked )
    {
     imageMapType.set('opacity', 0.5); 
    } else
    {
     imageMapType.set('opacity', 0); 
    }
   }

   google.maps.event.addDomListener(window, 'load', initialize);

  </script>
<% end %>